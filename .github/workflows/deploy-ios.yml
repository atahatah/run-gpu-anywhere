name: Build and Release iOS App

on:
  push:
    branches:
      - main

env:
  CERT_KEY: ${{ secrets.CERT_KEY }}
  APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
  APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
  APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
  APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}

jobs:
  deploy_ios_app:
    runs-on: macos-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "setup java"
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "21"

      - name: "Read flutter version from fvm config"
        id: flutter_info
        run: |
          FLUTTER_VERSION=$(grep 'flutter' .tool-versions | awk '{print $2}' | sed 's/-.*//')
          echo "FLUTTER_VERSION=$FLUTTER_VERSION" >> $GITHUB_ENV
        shell: bash

      - name: "Setup Flutter"
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: "Install codemagic-cli-tools"
        run: |
          pip3 install codemagic-cli-tools --break-system-packages

      - name: "Install the Apple certificate"
        run: |
          echo -n "$CERT_KEY" >> $RUNNER_TEMP/cert_key

      - name: "keychain initialize"
        run: |
          keychain initialize

      - name: "Install the Apple provisioning profile(IOS_APP_STORE)"
        run: |
          app-store-connect fetch-signing-files $(xcode-project detect-bundle-id) \
            --platform IOS \
            --type IOS_APP_STORE \
            --certificate-key=@file:$RUNNER_TEMP/cert_key \
            --create

      - name: "keychain add-certificates"
        run: |
          keychain add-certificates

      - name : "Use provisioning profiles"
        run: |
          xcode-project use-profiles
    
      - name : "Install dependencies"
        run: |
          flutter packages pub get
          dart run build_runner build

      - name: Build iOS app
        run: |
          flutter build ipa --release \
            --export-options-plist=$HOME/export_options.plist

      - name: "Publish to App Store Connect"
        run: |
            app-store-connect publish \
                --path $(find $(pwd) -name "*.ipa")

    #   - name: "Upload TestFlight"
    #     run: |
    #       app-store-connect publish --path "$PACKAGE_NAME" --testflight

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
            security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
            rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision